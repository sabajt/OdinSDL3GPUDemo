#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_ResUBO
{
    float4 res_cam;
};

struct main0_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct main0_in
{
    float4 in_var_TEXCOORD0 [[user(locn0)]];
    float2 in_var_TEXCOORD1 [[user(locn1)]];
    float2 in_var_TEXCOORD3 [[user(locn3)]];
    float2 in_var_TEXCOORD4 [[user(locn4)]];
    float in_var_TEXCOORD5 [[user(locn5)]];
    float in_var_TEXCOORD6 [[user(locn6)]];
};

fragment main0_out main0(main0_in in [[stage_in]], constant type_ResUBO& ResUBO [[buffer(0)]])
{
    main0_out out = {};
    float4 _33 = in.in_var_TEXCOORD0;
    float _53 = precise::min(in.in_var_TEXCOORD4.x * 0.5, in.in_var_TEXCOORD4.y * 0.5);
    float _54 = length((((in.in_var_TEXCOORD1 * float2(0.5)) + float2(0.5)) * ResUBO.res_cam.xy) - (in.in_var_TEXCOORD3 - ResUBO.res_cam.zw));
    bool _61;
    if (!(_54 > _53))
    {
        _61 = _54 < (_53 - in.in_var_TEXCOORD5);
    }
    else
    {
        _61 = true;
    }
    float _83;
    if (_61)
    {
        _83 = 0.0;
    }
    else
    {
        float _82;
        if (in.in_var_TEXCOORD6 > 0.0)
        {
            float _69 = (_53 - in.in_var_TEXCOORD5) + in.in_var_TEXCOORD6;
            float _81;
            if (_54 > _69)
            {
                _81 = precise::min((_53 - _54) / in.in_var_TEXCOORD6, 1.0);
            }
            else
            {
                _81 = 1.0 - precise::min((_69 - _54) / in.in_var_TEXCOORD6, 1.0);
            }
            _82 = _81;
        }
        else
        {
            _82 = 1.0;
        }
        _83 = _82;
    }
    _33.w = _33.w * _83;
    out.out_var_SV_Target0 = _33;
    return out;
}

